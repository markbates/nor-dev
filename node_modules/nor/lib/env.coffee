qs = require 'querystring'
sys = require 'sys'

class Nor.Env
  
  constructor: (@req, @res, @url, @options = {}) ->
    @setFromOptions(options)
    @origUrl = @url
    if /(.+)\?(.+)/.test @url
      @results = /(.+)\?(.+)/.exec @url
      @url = @results[1]
      @query = @results[2]
      for key, value of @decodeQueryString(@query)
        @params[key] = value
    unless @caller is null
      for key, value of @caller.data()
        @params[key] = value
        
  setFromOptions: (options = {}) ->
    @method = @options['method'] ||= 'get'
    @event = @options['event'] ||= null
    @params = @options['params'] ||= {}
    @caller = @options['caller'] ||= null
        
  decodeQueryString: (query) ->
    params = qs.parse(@query)
    for name, value of params
      @normalizeParams(params, name, value)
    return params
    
  normalizeParams: (params, name, v = nil) ->
    k = (/^\[?(\w+)/).exec(name)
    if k?
      k = k[1]
    else
      k = name
    if /^\[([^\[]+)\]$/.test k
      k = k.replace(/(\[|\])/g, '')

    if /^\[\w+\]$/.test name
      after = ''
    else 
      if /\[/.test name
        after = (/^\[?\w+\]?(.+)$/).exec(name)
        if after?
          after = after[1]
        else
          after = ''
      else
        after = ''

    return if k is ''

    if after is ''
      params[k] = v
    else if after is "[]"
      params[k] ||= []
      params[k].push v
    else
      if (/^\[\]\[([^\[\]]+)\]$/).test(after) or (/^\[\](.+)$/).test(after)
        child_key = after.exec(/^\[\]\[([^\[\]]+)\]$/)[1]
        if child_key is null
          child_key = after.exec(/^\[\](.+)$/)[1]
        params[k] ||= []
        if params[k].last.is_a?(Hash) && !params[k].last.key?(child_key)
          @normalizeParams(params[k].last, child_key, v)
        else
          params[k].push @normalizeParams({}, child_key, v)
      else
        params[k] ||= {}
        params[k] = @normalizeParams(params[k], after, v)
    return params
    
  writeHead: (status = 200, options = {}) ->
    options['Content-Type'] ||= 'text/html'
    @res.writeHead(status, options)
    
  write: (str) ->
    @res.write(str)
    
  end: (str = '') ->
    @res.end(str)