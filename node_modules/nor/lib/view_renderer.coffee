sys = require 'sys'
ejs = require 'ejs'
fs = require 'fs'
path = require 'path'

class Nor.ViewRenderer
  
  constructor: (@view_name, @options = {}) ->
    
  render: (locals = {}) ->
    view = null
    locals['content_for'] ||= {}
    locals['sys'] ||= sys
    locals['req'] ||= locals['env'].req
    locals['debug'] ||= (object) ->
      sys.inspect object
    locals['yield'] ||= (content_for = 'body') ->
      locals['content_for'][content_for]
    
    if path.existsSync(@view_name)
      view = @view_name
      
    if view
      @body = @readAndWrite(view, locals)
    else
      f = @locateView(@view_name)
      if f?
        @body = @readAndWrite(f, locals)
          
    @renderLayout(locals)
    return @body
          
  renderLayout: (locals = {}) ->
    if @options['layout']
      f = @locateView(@options['layout'])
      if f?
        locals['content_for']['body'] = @body
        @body = @readAndWrite(f, locals)
      
  locateView: (name) ->
    for p in Nor.View.paths
      f = "#{p}/#{name}"
      if path.existsSync(f)
        return f
          
  readAndWrite: (path, locals = {}) ->
    locals['env']._meta.rendered_view_paths.push path
    ejs.render(fs.readFileSync(path, 'utf-8'), locals: locals)