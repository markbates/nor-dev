sys = require 'sys'
lingo = require 'lingo'

class Nor.Route

  constructor: (@pattern, @method = 'get', @options = {}) ->
    @isRegExp = @pattern instanceof RegExp
    @patternResults = null
    @controller_name = null
    @action_name = null
    @parseTo()

  matches: (url) ->
    if @isRegExp
      pat = new RegExp @pattern
      @patternResults = pat.exec url
      if @patternResults is null
        return false
      @patternResults = @patternResults[1..@patternResults.length - 1]
      return true
    else
      return @pattern is url
      
  parseTo: ->
    to = @options['to']
    throw new Error("Route: #{@pattern} does not define a 'to' mapping!") unless to
    mappings = to.split('#')
    @controller_name = mappings[0]
    @action_name = mappings[1]
    @controller = "#{@controller_name} controller"
    @controller = lingo.camelcase(@controller, true)
    @controller_file_name = "#{@controller_name}_controller"
      
  exec: (env) ->
    env.controller_name = @controller_name
    env.action_name = @action_name
    env.controller_file_name = @controller_file_name
    env.route = @
    con = require("#{Nor.Application.root}/app/controllers/#{@controller_file_name}").controller
    con = new con(env)
    con[@action_name].apply(con)